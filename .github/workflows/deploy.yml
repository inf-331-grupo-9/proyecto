name: Deploy a Azure VM

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repo
        uses: actions/checkout@v3

      - name: 🔐 Establecer clave SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no azureuser@${{ secrets.VM_PUBLIC_IP }} << 'EOF'
            echo "📁 Cambiando a la carpeta del proyecto"
            cd ${{ secrets.PROJECT_PATH }}

            echo "🔄 Resguardando archivo .env si existe"
            mv BE/.env ../.env.bak

            echo "🔁 Revirtiendo cambios y haciendo git pull"
            git reset --hard
            git pull origin master

            echo "♻️ Restaurando archivo .env si existía"
            mv ../.env.bak BE/.env

            echo "📦 Instalando dependencias y reiniciando backend"
            cd BE
            npm install
            npm install dotenv
            pm2 restart backend || pm2 start npm --name backend -- run dev

            echo "🧱 Instalando dependencias y reiniciando frontend"
            cd ../FE
            npm install --force
            pm2 restart frontend || pm2 start npm --name frontend -- run dev
          EOF

      - name: ✅ Notificación Slack si éxito
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":white_check_mark: *Despliegue exitoso* del proyecto `${{ github.repository }}` en commit `${{ github.sha }}` por `${{ github.actor }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ❌ Notificación Slack si falla
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":x: *Falló el despliegue* del proyecto `${{ github.repository }}` en commit `${{ github.sha }}` por `${{ github.actor }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  selenium-tests:
    name: Run Selenium Tests (Python)
    runs-on: ubuntu-latest
    needs: deploy

    steps:
        - name: 📂 Checkout repo
          uses: actions/checkout@v3

        - name: ⏳ Esperar que la app responda con HTTP 200
          run: |
            for i in {1..40}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" https://grupo9-proyecto.eastus.cloudapp.azure.com)
              echo "Intento $i: código HTTP = $code"
              if [[ "$code" == "200" ]]; then
                echo "✅ App lista (código 200 recibido)"
                exit 0
              fi
              sleep 10
            done
            echo "❌ Timeout: la app no respondió con 200"
            exit 1

        - name: 🐍 Setup Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'

        - name: 🧱 Instalar Chrome y ChromeDriver
          run: |
            sudo apt-get update
            sudo apt-get install -y wget unzip
            wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo apt install -y ./google-chrome-stable_current_amd64.deb
            CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
            wget https://chromedriver.storage.googleapis.com/${CHROME_VERSION}/chromedriver_linux64.zip || wget https://chromedriver.storage.googleapis.com/$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE)/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /usr/bin/chromedriver
            sudo chmod +x /usr/bin/chromedriver
            pip install selenium pytest

        - name: 🚀 Ejecutar prueba Selenium con Pytest
          run: |
            pytest FE/tests/test_login_calif.py FE/tests/test_empresa_create.py --maxfail=1 --disable-warnings -q

        - name: ✅ Notificación Slack si éxito
          if: success()
          uses: slackapi/slack-github-action@v1.24.0
          with:
            payload: |
              {
                "text": ":test_tube: *Prueba Selenium exitosa* en `${{ github.repository }}` tras el despliegue."
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

        - name: ❌ Notificación Slack si falla
          if: failure()
          uses: slackapi/slack-github-action@v1.24.0
          with:
            payload: |
              {
                "text": ":x: *Falló la prueba Selenium* en `${{ github.repository }}` tras el despliegue."
              }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
